/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ClientDTO
 */
export interface ClientDTO {
    /**
     * 
     * @type {number}
     * @memberof ClientDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    'createdDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClientDTO
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    'website'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientDTO
     */
    'pictureUrl'?: string;
}
/**
 * 
 * @export
 * @interface ConfirmUserDTO
 */
export interface ConfirmUserDTO {
    /**
     * 
     * @type {string}
     * @memberof ConfirmUserDTO
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmUserDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmUserDTO
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface CreateUserDTO
 */
export interface CreateUserDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'gender': string;
    /**
     * 
     * @type {number}
     * @memberof CreateUserDTO
     */
    'roleId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateUserDTO
     */
    'departmentId': number;
}
/**
 * 
 * @export
 * @interface DepartmentDTO
 */
export interface DepartmentDTO {
    /**
     * 
     * @type {number}
     * @memberof DepartmentDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DepartmentDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface DepartmentRequestDTO
 */
export interface DepartmentRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof DepartmentRequestDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentRequestDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface EmployeeDetailsDTO
 */
export interface EmployeeDetailsDTO {
    /**
     * 
     * @type {number}
     * @memberof EmployeeDetailsDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'employeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'workEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'roleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'departmentName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'hireDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDetailsDTO
     */
    'reportingManager'?: string;
}
/**
 * 
 * @export
 * @interface JwtRequest
 */
export interface JwtRequest {
    /**
     * 
     * @type {string}
     * @memberof JwtRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof JwtRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ProfileDetailsDTO
 */
export interface ProfileDetailsDTO {
    /**
     * 
     * @type {number}
     * @memberof ProfileDetailsDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'maritalStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'profilePicUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProfileDetailsDTO
     */
    'clientId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'ClientName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProfileDetailsDTO
     */
    'departmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'departmentName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDetailsDTO
     */
    'roleTypeName'?: string;
}
/**
 * 
 * @export
 * @interface ProfileUpdateDTO
 */
export interface ProfileUpdateDTO {
    /**
     * 
     * @type {number}
     * @memberof ProfileUpdateDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'dateOfBirth'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'maritalStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDTO
     */
    'profilePicUrl'?: string;
}
/**
 * 
 * @export
 * @interface RoleDTO
 */
export interface RoleDTO {
    /**
     * 
     * @type {number}
     * @memberof RoleDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoleDTO
     */
    'roleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleDTO
     */
    'roleDescription'?: string;
    /**
     * 
     * @type {number}
     * @memberof RoleDTO
     */
    'roleTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoleDTO
     */
    'roleTypeName'?: string;
}
/**
 * 
 * @export
 * @interface RoleRequestDTO
 */
export interface RoleRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof RoleRequestDTO
     */
    'roleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleRequestDTO
     */
    'roleDescription'?: string;
    /**
     * 
     * @type {number}
     * @memberof RoleRequestDTO
     */
    'roleTypeId'?: number;
}
/**
 * 
 * @export
 * @interface RoleTypeAuthorization
 */
export interface RoleTypeAuthorization {
    /**
     * 
     * @type {number}
     * @memberof RoleTypeAuthorization
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoleTypeAuthorization
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleTypeAuthorization
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: RoleTypeEntityPermission; }}
     * @memberof RoleTypeAuthorization
     */
    'entityPermissions'?: { [key: string]: RoleTypeEntityPermission; };
}
/**
 * 
 * @export
 * @interface RoleTypeAuthorizationConfigurationDTO
 */
export interface RoleTypeAuthorizationConfigurationDTO {
    /**
     * 
     * @type {number}
     * @memberof RoleTypeAuthorizationConfigurationDTO
     */
    'roleTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof RoleTypeAuthorizationConfigurationDTO
     */
    'entity': string;
    /**
     * 
     * @type {string}
     * @memberof RoleTypeAuthorizationConfigurationDTO
     */
    'permission': RoleTypeAuthorizationConfigurationDTOPermissionEnum;
    /**
     * 
     * @type {boolean}
     * @memberof RoleTypeAuthorizationConfigurationDTO
     */
    'value': boolean;
}

export const RoleTypeAuthorizationConfigurationDTOPermissionEnum = {
    Create: 'CREATE',
    Read: 'READ',
    Update: 'UPDATE',
    Delete: 'DELETE'
} as const;

export type RoleTypeAuthorizationConfigurationDTOPermissionEnum = typeof RoleTypeAuthorizationConfigurationDTOPermissionEnum[keyof typeof RoleTypeAuthorizationConfigurationDTOPermissionEnum];

/**
 * 
 * @export
 * @interface RoleTypeDTO
 */
export interface RoleTypeDTO {
    /**
     * 
     * @type {number}
     * @memberof RoleTypeDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoleTypeDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleTypeDTO
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface RoleTypeEntityPermission
 */
export interface RoleTypeEntityPermission {
    /**
     * 
     * @type {boolean}
     * @memberof RoleTypeEntityPermission
     */
    'read'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoleTypeEntityPermission
     */
    'create'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoleTypeEntityPermission
     */
    'update'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoleTypeEntityPermission
     */
    'delete'?: boolean;
}
/**
 * 
 * @export
 * @interface RoleTypeRequestDTO
 */
export interface RoleTypeRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof RoleTypeRequestDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleTypeRequestDTO
     */
    'description'?: string;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ConfirmUserDTO} confirmUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmUser: async (confirmUserDTO: ConfirmUserDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'confirmUserDTO' is not null or undefined
            assertParamExists('confirmUser', 'confirmUserDTO', confirmUserDTO)
            const localVarPath = `/auth/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserDTO: CreateUserDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDTO' is not null or undefined
            assertParamExists('createUser', 'createUserDTO', createUserDTO)
            const localVarPath = `/auth/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JwtRequest} jwtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (jwtRequest: JwtRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jwtRequest' is not null or undefined
            assertParamExists('login', 'jwtRequest', jwtRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jwtRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ConfirmUserDTO} confirmUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmUser(confirmUserDTO: ConfirmUserDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmUser(confirmUserDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserDTO: CreateUserDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JwtRequest} jwtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(jwtRequest: JwtRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(jwtRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ConfirmUserDTO} confirmUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmUser(confirmUserDTO: ConfirmUserDTO, options?: any): AxiosPromise<string> {
            return localVarFp.confirmUser(confirmUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserDTO: CreateUserDTO, options?: any): AxiosPromise<string> {
            return localVarFp.createUser(createUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JwtRequest} jwtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(jwtRequest: JwtRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.login(jwtRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {ConfirmUserDTO} confirmUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public confirmUser(confirmUserDTO: ConfirmUserDTO, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).confirmUser(confirmUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDTO} createUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public createUser(createUserDTO: CreateUserDTO, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).createUser(createUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JwtRequest} jwtRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(jwtRequest: JwtRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(jwtRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClientDTO} clientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (clientDTO: ClientDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientDTO' is not null or undefined
            assertParamExists('createClient', 'clientDTO', clientDTO)
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClient: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteClient', 'id', id)
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClients: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClientById', 'id', id)
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ClientDTO} clientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClient: async (id: number, clientDTO: ClientDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateClient', 'id', id)
            // verify required parameter 'clientDTO' is not null or undefined
            assertParamExists('updateClient', 'clientDTO', clientDTO)
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ClientDTO} clientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(clientDTO: ClientDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(clientDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClient(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClient(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllClients(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClientDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllClients(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ClientDTO} clientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClient(id: number, clientDTO: ClientDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClient(id, clientDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @param {ClientDTO} clientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(clientDTO: ClientDTO, options?: any): AxiosPromise<ClientDTO> {
            return localVarFp.createClient(clientDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClient(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClients(options?: any): AxiosPromise<Array<ClientDTO>> {
            return localVarFp.getAllClients(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientById(id: number, options?: any): AxiosPromise<ClientDTO> {
            return localVarFp.getClientById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ClientDTO} clientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClient(id: number, clientDTO: ClientDTO, options?: any): AxiosPromise<ClientDTO> {
            return localVarFp.updateClient(id, clientDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @param {ClientDTO} clientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public createClient(clientDTO: ClientDTO, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).createClient(clientDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public deleteClient(id: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).deleteClient(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getAllClients(options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).getAllClients(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getClientById(id: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).getClientById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ClientDTO} clientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClient(id: number, clientDTO: ClientDTO, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).updateClient(id, clientDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DepartmentRequestDTO} departmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment: async (departmentRequestDTO: DepartmentRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentRequestDTO' is not null or undefined
            assertParamExists('createDepartment', 'departmentRequestDTO', departmentRequestDTO)
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDepartment', 'id', id)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDepartmentById', 'id', id)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {DepartmentRequestDTO} departmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment: async (id: number, departmentRequestDTO: DepartmentRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDepartment', 'id', id)
            // verify required parameter 'departmentRequestDTO' is not null or undefined
            assertParamExists('updateDepartment', 'departmentRequestDTO', departmentRequestDTO)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DepartmentRequestDTO} departmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepartment(departmentRequestDTO: DepartmentRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepartment(departmentRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepartment(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepartment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDepartments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDepartments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartmentById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {DepartmentRequestDTO} departmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDepartment(id: number, departmentRequestDTO: DepartmentRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDepartment(id, departmentRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * 
         * @param {DepartmentRequestDTO} departmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment(departmentRequestDTO: DepartmentRequestDTO, options?: any): AxiosPromise<DepartmentDTO> {
            return localVarFp.createDepartment(departmentRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDepartment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments(options?: any): AxiosPromise<Array<DepartmentDTO>> {
            return localVarFp.getAllDepartments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentById(id: number, options?: any): AxiosPromise<DepartmentDTO> {
            return localVarFp.getDepartmentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {DepartmentRequestDTO} departmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment(id: number, departmentRequestDTO: DepartmentRequestDTO, options?: any): AxiosPromise<DepartmentDTO> {
            return localVarFp.updateDepartment(id, departmentRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
export class DepartmentsApi extends BaseAPI {
    /**
     * 
     * @param {DepartmentRequestDTO} departmentRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public createDepartment(departmentRequestDTO: DepartmentRequestDTO, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).createDepartment(departmentRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public deleteDepartment(id: number, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).deleteDepartment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public getAllDepartments(options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getAllDepartments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public getDepartmentById(id: number, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getDepartmentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {DepartmentRequestDTO} departmentRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public updateDepartment(id: number, departmentRequestDTO: DepartmentRequestDTO, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).updateDepartment(id, departmentRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployees: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployees(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeDetailsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployees(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployees(options?: any): AxiosPromise<Array<EmployeeDetailsDTO>> {
            return localVarFp.getEmployees(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getEmployees(options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getEmployees(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RoleRequestDTO} roleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (roleRequestDTO: RoleRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleRequestDTO' is not null or undefined
            assertParamExists('createRole', 'roleRequestDTO', roleRequestDTO)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRole', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRole', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RoleRequestDTO} roleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (id: number, roleRequestDTO: RoleRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRole', 'id', id)
            // verify required parameter 'roleRequestDTO' is not null or undefined
            assertParamExists('updateRole', 'roleRequestDTO', roleRequestDTO)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RoleRequestDTO} roleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(roleRequestDTO: RoleRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(roleRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RoleRequestDTO} roleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(id: number, roleRequestDTO: RoleRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(id, roleRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleRequestDTO} roleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(roleRequestDTO: RoleRequestDTO, options?: any): AxiosPromise<RoleDTO> {
            return localVarFp.createRole(roleRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles(options?: any): AxiosPromise<Array<RoleDTO>> {
            return localVarFp.getAllRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(id: number, options?: any): AxiosPromise<RoleDTO> {
            return localVarFp.getRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RoleRequestDTO} roleRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(id: number, roleRequestDTO: RoleRequestDTO, options?: any): AxiosPromise<RoleDTO> {
            return localVarFp.updateRole(id, roleRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @param {RoleRequestDTO} roleRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public createRole(roleRequestDTO: RoleRequestDTO, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).createRole(roleRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public deleteRole(id: number, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).deleteRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getAllRoles(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).getAllRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getRole(id: number, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).getRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RoleRequestDTO} roleRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public updateRole(id: number, roleRequestDTO: RoleRequestDTO, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).updateRole(id, roleRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoleTypesApi - axios parameter creator
 * @export
 */
export const RoleTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RoleTypeAuthorizationConfigurationDTO} roleTypeAuthorizationConfigurationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrRemoveRoleTypeAuthorization: async (roleTypeAuthorizationConfigurationDTO: RoleTypeAuthorizationConfigurationDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleTypeAuthorizationConfigurationDTO' is not null or undefined
            assertParamExists('addOrRemoveRoleTypeAuthorization', 'roleTypeAuthorizationConfigurationDTO', roleTypeAuthorizationConfigurationDTO)
            const localVarPath = `/roletypes/authorizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTypeAuthorizationConfigurationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleType: async (roleTypeRequestDTO: RoleTypeRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleTypeRequestDTO' is not null or undefined
            assertParamExists('createRoleType', 'roleTypeRequestDTO', roleTypeRequestDTO)
            const localVarPath = `/roletypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTypeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleType: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRoleType', 'id', id)
            const localVarPath = `/roletypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoleTypeAuthorizations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roletypes/authorizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoleTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roletypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleTypeById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoleTypeById', 'id', id)
            const localVarPath = `/roletypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleType: async (id: number, roleTypeRequestDTO: RoleTypeRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRoleType', 'id', id)
            // verify required parameter 'roleTypeRequestDTO' is not null or undefined
            assertParamExists('updateRoleType', 'roleTypeRequestDTO', roleTypeRequestDTO)
            const localVarPath = `/roletypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleTypeRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleTypesApi - functional programming interface
 * @export
 */
export const RoleTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RoleTypeAuthorizationConfigurationDTO} roleTypeAuthorizationConfigurationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrRemoveRoleTypeAuthorization(roleTypeAuthorizationConfigurationDTO: RoleTypeAuthorizationConfigurationDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrRemoveRoleTypeAuthorization(roleTypeAuthorizationConfigurationDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoleType(roleTypeRequestDTO: RoleTypeRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoleType(roleTypeRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoleType(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleType(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoleTypeAuthorizations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTypeAuthorization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoleTypeAuthorizations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoleTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTypeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoleTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleTypeById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleTypeById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoleType(id: number, roleTypeRequestDTO: RoleTypeRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleTypeDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoleType(id, roleTypeRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleTypesApi - factory interface
 * @export
 */
export const RoleTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleTypesApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleTypeAuthorizationConfigurationDTO} roleTypeAuthorizationConfigurationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrRemoveRoleTypeAuthorization(roleTypeAuthorizationConfigurationDTO: RoleTypeAuthorizationConfigurationDTO, options?: any): AxiosPromise<void> {
            return localVarFp.addOrRemoveRoleTypeAuthorization(roleTypeAuthorizationConfigurationDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleType(roleTypeRequestDTO: RoleTypeRequestDTO, options?: any): AxiosPromise<RoleTypeDTO> {
            return localVarFp.createRoleType(roleTypeRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleType(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoleType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoleTypeAuthorizations(options?: any): AxiosPromise<Array<RoleTypeAuthorization>> {
            return localVarFp.getAllRoleTypeAuthorizations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoleTypes(options?: any): AxiosPromise<Array<RoleTypeDTO>> {
            return localVarFp.getAllRoleTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleTypeById(id: number, options?: any): AxiosPromise<RoleTypeDTO> {
            return localVarFp.getRoleTypeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleType(id: number, roleTypeRequestDTO: RoleTypeRequestDTO, options?: any): AxiosPromise<RoleTypeDTO> {
            return localVarFp.updateRoleType(id, roleTypeRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleTypesApi - object-oriented interface
 * @export
 * @class RoleTypesApi
 * @extends {BaseAPI}
 */
export class RoleTypesApi extends BaseAPI {
    /**
     * 
     * @param {RoleTypeAuthorizationConfigurationDTO} roleTypeAuthorizationConfigurationDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleTypesApi
     */
    public addOrRemoveRoleTypeAuthorization(roleTypeAuthorizationConfigurationDTO: RoleTypeAuthorizationConfigurationDTO, options?: AxiosRequestConfig) {
        return RoleTypesApiFp(this.configuration).addOrRemoveRoleTypeAuthorization(roleTypeAuthorizationConfigurationDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleTypesApi
     */
    public createRoleType(roleTypeRequestDTO: RoleTypeRequestDTO, options?: AxiosRequestConfig) {
        return RoleTypesApiFp(this.configuration).createRoleType(roleTypeRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleTypesApi
     */
    public deleteRoleType(id: number, options?: AxiosRequestConfig) {
        return RoleTypesApiFp(this.configuration).deleteRoleType(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleTypesApi
     */
    public getAllRoleTypeAuthorizations(options?: AxiosRequestConfig) {
        return RoleTypesApiFp(this.configuration).getAllRoleTypeAuthorizations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleTypesApi
     */
    public getAllRoleTypes(options?: AxiosRequestConfig) {
        return RoleTypesApiFp(this.configuration).getAllRoleTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleTypesApi
     */
    public getRoleTypeById(id: number, options?: AxiosRequestConfig) {
        return RoleTypesApiFp(this.configuration).getRoleTypeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {RoleTypeRequestDTO} roleTypeRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleTypesApi
     */
    public updateRoleType(id: number, roleTypeRequestDTO: RoleTypeRequestDTO, options?: AxiosRequestConfig) {
        return RoleTypesApiFp(this.configuration).updateRoleType(id, roleTypeRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (createUserDTO: CreateUserDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDTO' is not null or undefined
            assertParamExists('registerUser', 'createUserDTO', createUserDTO)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createUserDTO !== undefined) {
                localVarQueryParameter['createUserDTO'] = createUserDTO;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProfileUpdateDTO} profileUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile: async (profileUpdateDTO: ProfileUpdateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileUpdateDTO' is not null or undefined
            assertParamExists('updateUserProfile', 'profileUpdateDTO', profileUpdateDTO)
            const localVarPath = `/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(createUserDTO: CreateUserDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(createUserDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProfileUpdateDTO} profileUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfile(profileUpdateDTO: ProfileUpdateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfile(profileUpdateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options?: any): AxiosPromise<ProfileDetailsDTO> {
            return localVarFp.getUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(createUserDTO: CreateUserDTO, options?: any): AxiosPromise<string> {
            return localVarFp.registerUser(createUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProfileUpdateDTO} profileUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(profileUpdateDTO: ProfileUpdateDTO, options?: any): AxiosPromise<ProfileDetailsDTO> {
            return localVarFp.updateUserProfile(profileUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserProfile(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDTO} createUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public registerUser(createUserDTO: CreateUserDTO, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).registerUser(createUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProfileUpdateDTO} profileUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserProfile(profileUpdateDTO: ProfileUpdateDTO, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserProfile(profileUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



